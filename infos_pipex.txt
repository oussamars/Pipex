int fds[2]; is to create a single pipe for communication between two processes

A pipe is a form of inter-process communication (IPC) that allows data to be passed
from one process to another. It essentially acts like a channel, allowing data to flow
from one end (write end) to another (read end).
A pipe has two ends:

Write end (fds[1]): This is where data is written by a process.
Read end (fds[0]): This is where data is read by another process.

Key Characteristics of a Pipe:

Unidirectional: Data flows in one direction, from the write end to the read end. If you need
two-way communication, you'd need two pipes (one for each direction).
Buffered: When data is written to the pipe, it's temporarily stored in a buffer until it's read
by another process.
Anonymous: Pipes created with pipe() are "anonymous", meaning they don't have a name and exist 
only for the duration of the process they disappear once the processes using them end.

Redirection with dup2: 

The data flow is redirected using dup2, which duplicates file descriptors:
The child process might redirect its standard output (stdout) to the pipe’s write end (fds[1]).
The parent process might redirect its standard input (stdin) to the pipe’s read end (fds[0]).

A process is simply a program that is running on your computer. It has its own memory and resources, and
the operating system manages it so it can do its work without interfering with other running programs.

X_OK: This checks if the file is executable. In other words, it ensures the file has execute permissions.
F_OK: This checks if the file exists. It returns true if the file is present.

